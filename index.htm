<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <style type="text/css">
    ul {
      padding: 0;
      margin: 0;
    }
    </style>
    <script type="text/javascript" src="assets/sh_main.js"></script>
    <script type="text/javascript" src="assets/sh_javascript.min.js"></script>
    <link type="text/css" rel="stylesheet" href="assets/pipe.css" />
    <link type="text/css" rel="stylesheet" href="assets/sh_vim-dark.css" />
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <title>node.js</title>
  </head>
  <body>
    <div id="toc">
      <ol>
        <li><a href="#download">Загрузить</a></li>
        <li><a href="https://github.com/joyent/node/raw/master/ChangeLog">ChangeLog</a></li>
        <li><a href="#about">Описание</a></li>
        <li><a href="v0.2.x/index.html">Документация по v0.2.6</a></li>
        <li><b><a href="v0.4.x/index.html">Документация по v0.4.12</a></b></li>
        <br/>
        <li><b><a href="https://github.com/joyent/node/wiki">Wiki</a></b></li>
      </ol>
    </div>
    <div id="content">

      <img id="logo" src="assets/logo.png" alt="node.js"/>

      <p id="introduction">
        Асинхронный I/O фреймворк для <a href="http://code.google.com/p/v8/">V8 JavaScript</a>.
      </p>

      <p>
        Пример web сервера, написанного с помощью Node и отвечающего строкой 'Hello World':
      </p>

      <pre>
var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/plain'});
  res.end('Hello World\n');
}).listen(8124, "127.0.0.1");
console.log('Server running at http://127.0.0.1:8124/');
</pre>

      <p>
        Чтобы запустить сервер, поместите код в файл с названием <code>example.js</code>
        и выполните его программой <code>node</code>:
      </p>
      <pre class="sh_none">
% node example.js
Server running at http://127.0.0.1:8124/</pre>

      <p>
        Простой пример сервера, который возвращает полученный запрос и слушает на порту 8124:
      </p>

      <pre>
var net = require('net');
net.createServer(function (socket) {
  socket.write("Echo server\r\n");
  socket.on("data", function (data) {
    socket.write(data);
  });
}).listen(8124, "127.0.0.1");
</pre>

      <p>
        Вы можете почерпнуть больше актуальной информации из <a href="https://github.com/joyent/node/wiki">wiki</a> проекта (<a href="http://forum.nodejs.ru/wiki/index.php/%D0%97%D0%B0%D0%B3%D0%BB%D0%B0%D0%B2%D0%BD%D0%B0%D1%8F_%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%86%D0%B0">русскоязычная вики</a> еще в процессе наполнения).
      </p>

      <h2 id="download">Загрузить</h2>

      <p>
        <a href="http://github.com/joyent/node/tree/master">Git-репозиторий</a>
      </p>

      <p>
        Последняя стабильная версия: 2011.09.15
        <a href="http://nodejs.org/dist/node-v0.4.12.tar.gz">node-v0.4.12.tar.gz</a>
        (<a href="v0.4.x/">документация на русском</a>)
      </p>

      <p>
        Последняя разрабатываемая версия: 2011.09.16
        <a href="http://nodejs.org/dist/node-v0.5.7.tar.gz">node-v0.5.7.tar.gz</a>
      </p>

      <p>
        Предпоследняя стабильная версия: 2010.12.30
        <a href="http://nodejs.org/dist/node-v0.2.6.tar.gz">node-v0.2.6.tar.gz</a>
        (<a href="v0.2.x/">документация на русском</a>)
      </p>

      <p>Все версии: <a href="http://nodejs.org/dist">дистрибутивы</a>, <a href="http://nodejs.org/docs">документация на английском</a></p>

      <p>
        Инструкции по сборке и список поддерживаемых ОС вы можете найти на странице
        <a href="https://github.com/joyent/node/wiki/Installation">https://github.com/ry/node/wiki/Installation</a>
      </p>

      <h2 id="about">Описание</h2>

      <p>
        Цель проекта Node - предоставить лёгкий способ построения масштабируемых
        сетевых программ. В примере с веб-сервером "hello world" может обслуживаться много одновременных клиентских запросов.  Node сообщает операционной системе (через <code>epoll</code>, <code>kqueue</code>,
        <code class="sh_none">/dev/poll</code>, или <code>select</code>)
        что её нужно оповещать при создании нового подключения, и 
        потом переходит в спящий режим. Если кто нибудь подключается, запускается
        обработчик. Для каждого соединения выделяется небольшой объём памяти в куче.
      </p>

      <p>
        This is in contrast to today's more common concurrency model where
        OS threads are employed. Thread-based networking is relatively 
        inefficient and very difficult to use.  See:
        <a href="http://www.kegel.com/c10k.html">this</a> and 
        <a href="http://bulk.fefe.de/scalable-networking.pdf">this.</a>

        Node will show much better memory efficiency under high-loads
        <!-- TODO benchmark -->
        than systems which allocate 2mb thread stacks for each connection.

        Furthermore, users of Node are free from worries of dead-locking
        the process &mdash; there are no locks.  Almost no function in Node
        directly performs I/O, so the process never blocks. Because
        nothing blocks, less-than-expert programmers are able to develop
        fast systems.
      </p>

      <p>
        Node is similar in design to and influenced by systems like Ruby's <a
        href="http://rubyeventmachine.com/">Event Machine</a> or Python's <a
        href="http://twistedmatrix.com/">Twisted</a>.  Node takes the event
        model a bit further &mdash; it presents the event loop as a language
        construct instead of as a library. In other systems there is always
        a blocking call to start the event-loop.  Typically one defines
        behavior through callbacks at the beginning of a script and at the
        end starts a server through a blocking call like
        <code>EventMachine::run()</code>. In Node there is no such
        start-the-event-loop call.  Node simply enters the event loop after
        executing the input script. Node exits the event loop when there are
        no more callbacks to perform.  This behavior is like browser
        javascript &mdash; the event loop is hidden from the user.
      </p>

      <p>
        HTTP is a first class protocol in Node.  Node's HTTP library has
        grown out of the author's experiences developing and working with
        web servers. For example, streaming data through most web frameworks
        is impossible.  Node attempts to correct these problems in its HTTP
        <a href="http://github.com/ry/http-parser/tree/master">parser</a>
        and API. Coupled with Node's purely evented infrastructure, it makes
        a good foundation for web libraries or frameworks.
      </p>

      <p>
        <i>
        But what about multiple-processor concurrency? Aren't threads
        necessary to scale programs to multi-core computers?
        </i>
        Processes are necessary to scale to multi-core computers, not
        memory-sharing threads. The fundamentals of scalable systems are
        fast networking and non-blocking design &mdash; the rest is message
        passing.  In future versions, Node will be able to fork new
        processes (using the <a
        href="http://www.whatwg.org/specs/web-workers/current-work/"> Web
        Workers API </a>) which fits well into the current design.
      </p>

      <p>
        Смотрите также:
        <ul>
          <li><a href="http://s3.amazonaws.com/four.livejournal/20091117/jsconf.pdf">слайды</a> с конференции JSConf 2009</li>
          <li><a href="http://nodejs.org/jsconf2010.pdf">слайды</a> с конференции JSConf 2010</li>
          <li><a href="http://www.yuiblog.com/blog/2010/05/20/video-dahl/">видео</a> с семинара в Yahoo, май 2010</li>
        </ul>
      </p>

    </div>


    <div style="padding-top: 10em; font-size: 8pt">
      <a href="http://no.de/"><img src="assets/sponsored.png" height="58" width="120"/></a><br/>
      <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String"
         title="JS String match"><img
         src="assets/promotejsh.gif" height="150" width="180"
         alt="JS String match"/></a>
    </div>
    <div style="clear: both; font-size: 8pt">
      Copyright 2010 Joyent, Inc
    </div>
    <script type="text/javascript">highlight(undefined, undefined, 'pre');</script>
  </body>
</html>
