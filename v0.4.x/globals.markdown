## Глобальные объекты

Эти объекты доступны в любом модуле. При их использовании нужно иметь в виду
что некоторые из них находятся не в глобальной области видимости, а в области видимости модуля.

### global

Глобальный объект.

В браузерах глобальной областью видимости одна и включает все остальные.
Т.е. в браузерах конструкция `var something` в начале скрипта создаст глобальную переменную.
В Node это поведение другое, а именно у каждого модуля есть своё пространство имён.
Чтобы создать переменную, видимую из всех модулей, её нужно создать как свойство объекта `global`.

### process

Объект процесса. Большая часть данных процесса находится именно здесь.
См. секцию ['Процесс'](process.html#process).

### console

Используется для вывода в stdout и stderr. См. секцию ['Стандартный вывод'](stdio.html).
`require` является не глобальной функцией, а локальной для каждого модуля.

### require()

Подключает модули. См. секцию ['Модули'](modules.html#modules).

### require.resolve()

Использует внутреннюю логику `require()` для определение местоположения модуля,
но не загружает его, а возвращает имя файла, содержащего модуль.

### require.paths

Массив путей поиска для `require()`. Этот массив может быть изменён
для добавления пользовательских путей.

Пример: добавить новый путь в начало массива.

    require.paths.unshift('/usr/local/node');


### __filename

Имя исполняемого скрипта. Это абсолютный путь, и не всегда это будет то же имя, которое было передано в аргументе командной строки.

Пример: запускаем `node example.js` из папки `/Users/mjr`.

    console.log(__filename);
    // /Users/mjr/example.js

`__filename` является не глобальной переменной, а локальной для каждого модуля.


### __dirname

Имя директории исполняемого скрипта.

Пример: запускаем `node example.js` из папки `/Users/mjr`.

    console.log(__dirname);
    // /Users/mjr

`__dirname` является не глобальной переменной, а локальной для каждого модуля.

### module

Ссылка на текущий модуль (типа `process.Module`). В частности, `module.exports` —
то же самое, что и объект `exports`. См. `src/node.js` для подробной информации.
`module` является не глобальной переменной, а локальной для каждого модуля.

### exports

Объект, который является общим для всех экземпляров текущего модуля и становящийся доступным при использовании `require()`.
`exports` является тем же объектом, что и `module.exports`. Подробности реализации вы можете посмотреть в файле `src/node.js` исходного кода Node.
Объект `exports` не является истинно глобальным, а локален для каждого модуля.

### setTimeout(cb, ms)
### clearTimeout(t)
### setInterval(cb, ms)
### clearInterval(t)

Функции таймера являются глобальными. См. секцию ['Таймеры'](timers.html).

