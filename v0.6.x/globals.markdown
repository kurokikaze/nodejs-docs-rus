# Глобальные объекты

<!-- type=misc -->

Эти объекты доступны в любом модуле. При их использовании нужно иметь в виду
что некоторые из них находятся не в глобальной области видимости, а в области видимости модуля.

## global

<!-- type=global -->

* {Object} Глобальный объект.

В браузерах глобальной областью видимости `window` одна для всех подключённых на странице скриптов.
Т.е. в браузерах конструкция `var something` в начале скрипта создаст глобальную переменную.
В Node это поведение другое, а именно у каждого модуля есть своё пространство имён.
Чтобы создать переменную, видимую из всех модулей, её нужно явно создать как свойство объекта `global`.

## process

<!-- type=global -->

* {Object}

Объект процесса. Большая часть данных процесса находится именно здесь.
См. секцию ['Процесс'](process.html#process).

## console

<!-- type=global -->

* {Object}

Используется для вывода в stdout и stderr. См. секцию ['Стандартный вывод'](stdio.html).

## Buffer

<!-- type=global -->

* {Object}

Используется для работы с бинарными данными. См. секцию про [буферы](buffer.html).

## require()

<!-- type=var -->

* {Function}

Подключает модули. См. секцию ['Модули'](modules.html#modules).
`require` является не глобальной функцией, а локальной для каждого модуля.

### require.resolve()

Использует внутреннюю логику `require()` для определение местоположения модуля,
но не загружает его, а возвращает имя файла, содержащего модуль.

### require.cache

* {Object}

Модули кешируются при загрузке в этом объекте. Если удалить из объекта элемент с определённым ключём,
то следующий вызов `require` перезагрузит модуль.


## __filename

<!-- type=var -->

* {String}

Имя исполняемого скрипта. Это абсолютный путь, и не всегда это будет то же имя,
которое было передано в аргументе командной строки. Для модуля это полный путь к файлу модуля.

Пример: запускаем `node example.js` из папки `/Users/mjr`.

    console.log(__filename);
    // /Users/mjr/example.js

`__filename` является не глобальной переменной, а локальной для каждого модуля.


## __dirname

<!-- type=var -->

* {String}


Имя директории, к которой расположен испольняемый скрипт.

Пример: запускаем `node example.js` из папки `/Users/mjr`.

    console.log(__dirname);
    // /Users/mjr

`__dirname` является не глобальной переменной, а локальной для каждого модуля.

## module

<!-- type=var -->

* {Object}

Ссылка на текущий модуль (типа `process.Module`). В частности, `module.exports` —
то же самое, что и объект `exports`. См. `src/node.js` для подробной информации.
`module` является не глобальной переменной, а локальной для каждого модуля.

## exports

<!-- type=var -->

* {Object}

Объект, который является общим для всех экземпляров текущего модуля и становящийся доступным при использовании `require()`.
`exports` является тем же объектом, что и `module.exports`. Подробности реализации вы можете посмотреть в файле `src/node.js` исходного кода Node.
Объект `exports` не является истинно глобальным, а локален для каждого модуля.

См. секцию ['Модули'](modules.html#modules).

## setTimeout(cb, ms)
## clearTimeout(t)
## setInterval(cb, ms)
## clearInterval(t)

<!--type=global-->

Функции таймера являются глобальными. См. секцию ['Таймеры'](timers.html).

